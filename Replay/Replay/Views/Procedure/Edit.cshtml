@model Replay.ViewModels.ProcedureEditViewModel

<head>
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,300i,700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
<style>
        body {
            font-family: Roboto;
            font-weight: 300;
        }
        h1 {
            font-family: Roboto;
            font-weight: 700;
        }
        .overdue {
            color: red;
        }
        
</style>
</head>

@{
    ViewData["Title"] = "Vorgangsbearbeitung";
}

<form asp-action="Edit" asp-controller="Procedure" method="post" onsubmit="prepareFormSubmission()">
<a class="btn btn-dark" asp-controller="Procedure" asp-action="Index"><i class="bi bi-arrow-left-circle"></i> Zurück zur Übersicht</a>
<br>
<br>
<h3>@Html.DisplayNameFor(model => model.name)</h2>
<hr>
<div class="mb-3">
    <input asp-for="name" class="form-control" type="text"/>
    <span asp-validation-for="name" class="text-danger"></span>
</div>
<br>

<h3>@Html.DisplayNameFor(model => model.Deadline)</h3>
<hr>
<div class="mb-3">
    <div class="mb-3">
    <input asp-for="Deadline" class="form-control" type="date"/>
    <span asp-validation-for="Deadline" class="text-danger"></span>
</div>
<br>

</div>
<br>

<h3>@Html.DisplayNameFor(model => model.ContractTypes)</h3>
    <hr>
    <div class="mb-3">
        <select asp-for="EstablishingContractTypeId" class="form-select" aria-placeholder="Vertragsart auswhählen">
            @foreach (var contracttype in Model.ContractTypes)
            {
                <option value="@contracttype.ID">@contracttype.Name
                </option>
            }
        </select>
        <span asp-validation-for="EstablishingContractTypeId" class="text-danger"></span>
    </div>

    <h3>@Html.DisplayNameFor(model => model.TargetDepartments)</h3>
    <hr>
    <div class="mb-3">
        <ul class="list-group">
            @for (var i = 0; i < Model.TargetDepartments.Count; i++)
            {
                <li class="list-group-item">
                    <input type="hidden" asp-for="TargetDepartments[i].Name" value="@Model.TargetDepartments[i].Name" />
                    <input class="form-check-input me-1" type="checkbox" asp-for="TargetDepartments[i].IsSelected">
                    <label class="form-check-label" for="TargetDepartments[i].IsSelected">@Model.TargetDepartments[i].Name</label>
                    <span asp-validation-for="TargetDepartments[i].IsSelected" class="text-danger"></span>
                </li>
            }
        </ul>
    </div>
    @if(Model.Departmenterror) {
        <div class="alert alert-warning" role="alert">
                Es muss mindestens eine Option ausgwählt werden
        </div>
    }


<h3>@Html.DisplayNameFor(model => model.ResponsiblePersonId)</h3>
    <hr>
    <div class="mb-3">
        <select asp-for="ResponsiblePersonId" class="form-control" aria-placeholder="Verantwortlichen auswählen">
            <option value="" disabled selected>Vorgangsverantwortlichen auswählen</option>
            @foreach (var person in Model.PossibleResponsiblePersons)
            {
                <option value="@person.Id">@person.FullName
                </option>
            }
        </select>
        <span asp-validation-for="ResponsiblePersonId" class="text-danger"></span>
    </div>
    <br>

    <h3>@Html.DisplayNameFor(model => model.ReferencePersonId)</h3>
    <hr>
    <div class="mb-3">
        <select asp-for="ReferencePersonId" class="form-control">
            <option value=""disabled selected>Zielperson auswählen</option>
            @foreach (var person in Model.PossibleReferencePersons)
            {
                <option value="@person.Id" selected="@(Model.ReferencePersonId == person.Id)">@person.FullName</option>
            }
        </select>
        <span asp-validation-for="ReferencePersonId" class="text-danger"></span>
    </div>
    <h3>@Html.DisplayNameFor(model => model.makandraTasks)</h3>
    <hr>
    <div class="mb-3">
        <ul class="list-group" id="task-list">
                @foreach (var task in Model.makandraTasks)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center" id="task-@task.Id">
                        <div>
                            <strong>Name:</strong> @task.Name<br />
                            <strong>Deadline:</strong> @task.TargetDate.ToString("dd.MM.yyyy")<br />
                            <strong>Status:</strong> @task.State.Name
                        </div>
                        <button type="button" class="btn btn-sm btn-danger" onclick="removeExistingTask(@task.Id)">X</button>
                    </li>
                }
            </ul>
            <button type="button" class="btn btn-primary mt-3" onclick="openTaskModal()">Aufgabe hinzufügen</button>
    </div>
<br>
<input type="hidden" id="NewTasks" name="NewTasks" />
<input type="hidden" id="RemovedTasks" name="RemovedTasks" />
<div>
    <button type="submit" class="btn btn-dark onclick="prepareFormSubmission()"btn">Speichern</button>
    <button type="button" class="btn btn-danger btn"><i class="bi bi-archive"></i> Archivieren</button>
</div>
</form>
<div class="modal" tabindex="-1" id="taskModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Neue Aufgabe hinzufügen</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="taskTemplate" class="form-label">Task Template</label>
                    <select class="form-select" id="taskTemplate">
                        @foreach (var template in Model.TaskTemplates)
                        {
                            <option value="@template.ID">@template.Name</option>
                        }
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Schließen</button>
                <button type="button" class="btn btn-primary" onclick="addTask()">Hinzufügen</button>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript zur Verwaltung des Modals und der Aufgaben -->
<script>
    let newTasks = [];
    let removedTasks = [];

    // Öffnet das Modal zum Hinzufügen einer neuen Aufgabe
    function openTaskModal() {
        var taskModal = new bootstrap.Modal(document.getElementById('taskModal'));
        taskModal.show();
    }

    // Fügt eine neue Aufgabe zur Liste hinzu
    function addTask() {
        var taskTemplateId = document.getElementById('taskTemplate').value;
        var taskTemplateName = document.getElementById('taskTemplate').options[document.getElementById('taskTemplate').selectedIndex].text;


        var taskList = document.getElementById('task-list');
        var taskId = new Date().getTime(); // Erstellen einer eindeutigen ID basierend auf der aktuellen Zeit

        var taskItem = document.createElement('li');
        taskItem.classList.add('list-group-item', 'd-flex', 'justify-content-between', 'align-items-center');
        taskItem.id = 'task-' + taskId;
        taskItem.innerHTML = `
            <div>
                <strong>Neue Aufgabe:</strong> ${taskTemplateName}<br />
            </div>
            <button type="button" class="btn btn-sm btn-danger" onclick="removeTask(${taskId})">X</button>
        `;

        taskList.appendChild(taskItem);

        newTasks.push({
            Id: taskId,
            TaskTemplateId: taskTemplateId,
            TaskTemplateName: taskTemplateName,
        });

        // Leeren Sie die Eingabefelder und schließen Sie das Modal
        document.getElementById('taskTemplate').value = "";
        var taskModal = bootstrap.Modal.getInstance(document.getElementById('taskModal'));
        taskModal.hide();
    }

    // Entfernt eine Aufgabe aus der Liste
    function removeTask(taskId) {
        var taskItem = document.getElementById('task-' + taskId);
        taskItem.remove();

        // Entfernen Sie die Aufgabe aus dem newTasks-Array
        newTasks = newTasks.filter(task => task.Id !== taskId);
    }

    function removeExistingTask(taskId) {
        console.log("Removing existing task with ID:", taskId);
    var taskItem = document.getElementById('task-' + taskId);
    taskItem.remove();

    // Fügen Sie die Aufgabe zum removedTasks-Array hinzu
    removedTasks.push({ Id: taskId });
    console.log("Current removed tasks:", removedTasks);
}

    // Bereitet das Formular für die Übermittlung vor
    function prepareFormSubmission() {
        newTasks = newTasks.map(task => ({
        ...task,
        TaskTemplateId: parseInt(task.TaskTemplateId, 10)
    }));
        document.getElementById('NewTasks').value = JSON.stringify(newTasks);
        document.getElementById('RemovedTasks').value = JSON.stringify(removedTasks);
    }
        console.log('NewTasks:', document.getElementById('NewTasks').value);
        console.log('RemovedTasks:', removedTasksJson);
</script>