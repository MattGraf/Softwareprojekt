// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Replay.Data;

#nullable disable

namespace Replay.Migrations
{
    [DbContext(typeof(MakandraContext))]
    partial class MakandraContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Replay.Models.Account.MTM.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PermissionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Replay.Models.Account.MTM.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Replay.Models.Account.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Replay.Models.Account.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Replay.Models.Account.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Replay.Models.ContractType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ContractTypes");
                });

            modelBuilder.Entity("Replay.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProcedureId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ProcedureId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Replay.Models.Duedate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Days")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Duedates");
                });

            modelBuilder.Entity("Replay.Models.MTM.MakandraProcessRole", b =>
                {
                    b.Property<int>("MakandraProcessId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleID")
                        .HasColumnType("INTEGER");

                    b.HasKey("MakandraProcessId", "RoleID");

                    b.HasIndex("RoleID");

                    b.ToTable("MakandraProcessRoles");
                });

            modelBuilder.Entity("Replay.Models.MTM.MakandraTaskRole", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("TaskRoles");
                });

            modelBuilder.Entity("Replay.Models.MTM.ProcedureDepartment", b =>
                {
                    b.Property<int>("ProcedureID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProcedureID", "DepartmentID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("ProcedureDepartments");
                });

            modelBuilder.Entity("Replay.Models.MTM.TaskTemplateContractType", b =>
                {
                    b.Property<int>("TaskTemplateID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractTypeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskTemplateID", "ContractTypeID");

                    b.HasIndex("ContractTypeID");

                    b.ToTable("TaskTemplateContractTypes");
                });

            modelBuilder.Entity("Replay.Models.MTM.TaskTemplateDepartment", b =>
                {
                    b.Property<int>("TaskTemplateID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskTemplateID", "DepartmentID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("TaskTemplateDepartments");
                });

            modelBuilder.Entity("Replay.Models.MTM.TaskTemplateRole", b =>
                {
                    b.Property<int>("TaskTemplateID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskTemplateID", "RoleID");

                    b.HasIndex("RoleID");

                    b.ToTable("TaskTemplateRoles");
                });

            modelBuilder.Entity("Replay.Models.MakandraProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("Replay.Models.MakandraTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Archived")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AssigneeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Instruction")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ResponsibleRoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StateId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("ProcedureId");

                    b.HasIndex("ResponsibleRoleId");

                    b.HasIndex("StateId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Replay.Models.MakandraTaskState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("States");
                });

            modelBuilder.Entity("Replay.Models.Procedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Archived")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("TEXT");

                    b.Property<int>("EstablishingContractTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReferencePersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResponsiblePersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("basedProcessId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("completedTasks")
                        .HasColumnType("INTEGER");

                    b.Property<int>("inprogressTasks")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("openTasks")
                        .HasColumnType("INTEGER");

                    b.Property<double>("progressbar")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Procedures");
                });

            modelBuilder.Entity("Replay.Models.TaskTemplate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Archived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultResponsible")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DuedateID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Instruction")
                        .HasColumnType("TEXT");

                    b.Property<int>("MakandraProcessId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("DuedateID");

                    b.HasIndex("MakandraProcessId");

                    b.ToTable("TaskTemplates");
                });

            modelBuilder.Entity("Replay.Models.Account.MTM.RolePermission", b =>
                {
                    b.HasOne("Replay.Models.Account.Permission", "Permission")
                        .WithMany("RolePermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Replay.Models.Account.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Replay.Models.Account.MTM.UserRole", b =>
                {
                    b.HasOne("Replay.Models.Account.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Replay.Models.Account.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Replay.Models.Department", b =>
                {
                    b.HasOne("Replay.Models.Procedure", null)
                        .WithMany("TargetDepartment")
                        .HasForeignKey("ProcedureId");
                });

            modelBuilder.Entity("Replay.Models.MTM.MakandraProcessRole", b =>
                {
                    b.HasOne("Replay.Models.MakandraProcess", "MakandraProcess")
                        .WithMany("MakandraProcessRoles")
                        .HasForeignKey("MakandraProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Replay.Models.Account.Role", "Role")
                        .WithMany("MakandraProcessRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MakandraProcess");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Replay.Models.MTM.MakandraTaskRole", b =>
                {
                    b.HasOne("Replay.Models.Account.Role", "Role")
                        .WithMany("TaskRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Replay.Models.MakandraTask", "Task")
                        .WithMany("EditAccess")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Replay.Models.MTM.ProcedureDepartment", b =>
                {
                    b.HasOne("Replay.Models.Department", "Department")
                        .WithMany("ProcedureDepartments")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Replay.Models.Procedure", "Procedure")
                        .WithMany("ProcedureDepartments")
                        .HasForeignKey("ProcedureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("Replay.Models.MTM.TaskTemplateContractType", b =>
                {
                    b.HasOne("Replay.Models.ContractType", "ContractType")
                        .WithMany("TaskTemplateContractTypes")
                        .HasForeignKey("ContractTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Replay.Models.TaskTemplate", "TaskTemplate")
                        .WithMany("TaskTemplateContractTypes")
                        .HasForeignKey("TaskTemplateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractType");

                    b.Navigation("TaskTemplate");
                });

            modelBuilder.Entity("Replay.Models.MTM.TaskTemplateDepartment", b =>
                {
                    b.HasOne("Replay.Models.Department", "Department")
                        .WithMany("TaskTemplateDepartments")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Replay.Models.TaskTemplate", "TaskTemplate")
                        .WithMany("TaskTemplateDepartments")
                        .HasForeignKey("TaskTemplateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("TaskTemplate");
                });

            modelBuilder.Entity("Replay.Models.MTM.TaskTemplateRole", b =>
                {
                    b.HasOne("Replay.Models.Account.Role", "Role")
                        .WithMany("TaskTemplateRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Replay.Models.TaskTemplate", "TaskTemplate")
                        .WithMany("EditAccess")
                        .HasForeignKey("TaskTemplateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("TaskTemplate");
                });

            modelBuilder.Entity("Replay.Models.MakandraTask", b =>
                {
                    b.HasOne("Replay.Models.Account.User", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId");

                    b.HasOne("Replay.Models.Procedure", "Procedure")
                        .WithMany("makandraTasks")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Replay.Models.Account.Role", "ResponsibleRole")
                        .WithMany()
                        .HasForeignKey("ResponsibleRoleId");

                    b.HasOne("Replay.Models.MakandraTaskState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("Procedure");

                    b.Navigation("ResponsibleRole");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Replay.Models.TaskTemplate", b =>
                {
                    b.HasOne("Replay.Models.Duedate", "Duedate")
                        .WithMany("TaskTemplates")
                        .HasForeignKey("DuedateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Replay.Models.MakandraProcess", null)
                        .WithMany("Tasks")
                        .HasForeignKey("MakandraProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Duedate");
                });

            modelBuilder.Entity("Replay.Models.Account.Permission", b =>
                {
                    b.Navigation("RolePermission");
                });

            modelBuilder.Entity("Replay.Models.Account.Role", b =>
                {
                    b.Navigation("MakandraProcessRoles");

                    b.Navigation("RolePermissions");

                    b.Navigation("TaskRoles");

                    b.Navigation("TaskTemplateRoles");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Replay.Models.Account.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Replay.Models.ContractType", b =>
                {
                    b.Navigation("TaskTemplateContractTypes");
                });

            modelBuilder.Entity("Replay.Models.Department", b =>
                {
                    b.Navigation("ProcedureDepartments");

                    b.Navigation("TaskTemplateDepartments");
                });

            modelBuilder.Entity("Replay.Models.Duedate", b =>
                {
                    b.Navigation("TaskTemplates");
                });

            modelBuilder.Entity("Replay.Models.MakandraProcess", b =>
                {
                    b.Navigation("MakandraProcessRoles");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Replay.Models.MakandraTask", b =>
                {
                    b.Navigation("EditAccess");
                });

            modelBuilder.Entity("Replay.Models.Procedure", b =>
                {
                    b.Navigation("ProcedureDepartments");

                    b.Navigation("TargetDepartment");

                    b.Navigation("makandraTasks");
                });

            modelBuilder.Entity("Replay.Models.TaskTemplate", b =>
                {
                    b.Navigation("EditAccess");

                    b.Navigation("TaskTemplateContractTypes");

                    b.Navigation("TaskTemplateDepartments");
                });
#pragma warning restore 612, 618
        }
    }
}
